version: 2.1

orbs:
  win: circleci/windows@2.2.0

environment:
  PIP_PROGRESS_BAR: off

jobs:
  build-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:3.9

    environment:
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build wheels
          command: |
            pip3 install --user cibuildwheel==2.2.2
            cibuildwheel --output-dir dist
      - store_artifacts:
          path: ./dist
      - persist_to_workspace:
          root: ./dist/
          paths: .

  build-linux-aarch64:
    parameters:
      python-version:
        type: string

    machine:
      image: ubuntu-2004:202101-01

    resource_class: arm.medium

    environment:
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: aarch64

    steps:
      - checkout
      - run:
          name: build wheels
          command: |
            sudo apt-get install docker
            python3 -m pip install cibuildwheel==2.2.2
            python3 -m cibuildwheel --output-dir dist
      - store_artifacts:
          path: ./dist
      - persist_to_workspace:
          root: ./dist/
          paths: .

  build-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - run:
          name: build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            python setup.py sdist -d ./dist
      - store_artifacts:
          path: ./dist
      - persist_to_workspace:
          root: ./dist/
          paths: .

  build-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: 12.5.1

    environment:
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_MACOS: x86_64 universal2

    steps:
      - checkout
      - run:
          name: build wheels
          command: |
            pip3 install cibuildwheel==2.2.2
            cibuildwheel --output-dir dist
      - store_artifacts:
          path: ./dist
      - persist_to_workspace:
          root: ./dist/
          paths: .

  build-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    environment:
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_WINDOWS: AMD64

    steps:
      - checkout
      - run:
          name: build wheels
          command: |
            python -m pip install cibuildwheel==2.2.2
            python -m cibuildwheel --output-dir dist
      - store_artifacts:
          path: ./dist
      - persist_to_workspace:
          root: ./dist/
          paths: .

  test-airspeed-velocity:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r benchmarks/requirements.txt
      - run:
          name: check that our airspeed velocity tests run without failure
          command: |
            . env/bin/activate
            asv machine --yes
            asv run --quick --strict

  test-doctest:
    docker:
      - image: circleci/python:3.7 # as of march 2019 RTD uses 3.7

    steps:
      - checkout
      - run:
          name: install doxygen
          command: sudo apt-get install doxygen
      - run:
          name: install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r docs/requirements.txt
      - run:
          name: build dimod
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace
      - run:
          name: build docs
          command: |
            . env/bin/activate
            make -C docs/ cpp html
      - store_artifacts:
          path: ./docs/build/html
      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest
      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  test-linux:
    parameters:
      python-version:
        type: string
      numpy-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r tests/requirements.txt
            pip install dimod --no-index -f dist/ --force-reinstall --no-deps
            pip install 'numpy<< parameters.numpy-version >>' --upgrade --only-binary=numpy
      - run:
          name: run tests
          command: |
            . env/bin/activate
            cd tests/
            coverage run --source=dimod --append -m unittest
      - run:
          name: codecov
          command: |
            . env/bin/activate
            cd tests/
            codecov

  test-linux-cpp11:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - run:
          name: run cpp tests
          command: |
            make -C testscpp/ --always-make

  test-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: 12.5.1

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install pyenv
          command: |
            brew install pyenv
      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.5.1
      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s
      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.5.1
      - run:
          name: install
          command: |
            eval "$(pyenv init -)"
            pyenv local << parameters.python-version >>
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r tests/requirements.txt
            pip install dimod --no-index -f dist/ --force-reinstall --no-deps
      - run:
          name: run tests
          command: |
            . env/bin/activate
            cd tests/
            coverage run --source=dimod --append -m unittest
      - run:
          name: codecov
          command: |
            . env/bin/activate
            cd tests/
            codecov

  test-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install from sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install dist/dimod*.tar.gz

  test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    steps:
      - checkout
      - attach_workspace:
          at: dist

      - run:
          name: install python and create venv
          command: |
            nuget install python -Version << parameters.python-version >> -ExcludeVersion -OutputDirectory .
            .\python\tools\python.exe --version
            .\python\tools\python.exe -m venv env

      - run:
          name: install dependencies
          command: |
            env\Scripts\activate.ps1
            python --version
            pip install -r requirements.txt
            pip install -r tests\requirements.txt
            pip install dimod --no-index -f dist/ --force-reinstall --no-deps

      - run:
          name: run unittests
          command: |
            env\Scripts\activate.ps1
            cd tests\
            coverage run -m unittest discover

      - run:
          name: codecov
          command: |
            env\Scripts\activate.ps1
            cd tests\
            codecov

  deploy-all:
    docker:
      - image: circleci/python:3.9

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

workflows:
  tests:
    jobs:
      - build-linux: &build
          matrix:
            parameters:
              python-version: &python-versions [3.6.8, 3.7.9, 3.8.9, 3.9.4, 3.10.0]
      - build-linux-aarch64: *build
      - build-osx: *build
      - build-sdist
      - build-windows: *build
      - test-airspeed-velocity
      - test-doctest
      - test-linux:
          name: test-linux-numpy<< matrix.numpy-version >>-py<< matrix.python-version >>
          requires:
            - build-linux
          matrix:
            parameters:
              # test the lowest numpy version and the highest minor of each
              # currently deployed
              numpy-version: [==1.17.3, <1.19, <1.20, <1.21, <1.22]
              python-version: *python-versions
            exclude:
              - numpy-version: ==1.17.3
                python-version: 3.9.4
              - numpy-version: ==1.17.3
                python-version: 3.10.0
              - numpy-version: <1.19
                python-version: 3.9.4
              - numpy-version: <1.19
                python-version: 3.10.0
              - numpy-version: <1.20
                python-version: 3.10.0
              - numpy-version: <1.21
                python-version: 3.6.8
              - numpy-version: <1.21
                python-version: 3.10.0
              - numpy-version: <1.22
                python-version: 3.6.8
      - test-linux-cpp11
      - test-osx:
          name: test-osx-py<< matrix.python-version >>
          requires:
            - build-osx
          matrix:
            parameters:
              python-version: *python-versions
      - test-sdist:
          requires:
            - build-sdist
      - test-windows:
          name: test-windows-py<< matrix.python-version >>
          requires:
            - build-windows
          matrix:
            parameters:
              python-version: *python-versions
  deploy:
    jobs:
      - build-linux: &deploy-build
          matrix:
            parameters:
              python-version: *python-versions
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - build-linux-aarch64: *deploy-build
      - build-osx: *deploy-build
      - build-sdist: *deploy-build
      - build-windows: *deploy-build
      - deploy-all:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - build-linux
            - build-linux-aarch64
            - build-osx
            - build-sdist
            - build-windows
